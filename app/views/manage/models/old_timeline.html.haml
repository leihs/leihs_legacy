:ruby
  def add_timeband(inventory_pool, bandNames_js, bandInfos_js, group_id)
    if group_id == "-1"
      bandInfos_js << <<-BAND2A
        Timeline.createBandInfo( { timeZone:       2,
                                   eventSource:    null,
                                   intervalUnit:   Timeline.DateTime.DAY,
                                   intervalPixels: 50,
                                   align:         'Top',
                                   theme:         theme } )
        BAND2A
      bandNames_js << _("Available in total: ")
    elsif group_id.nil?
      bandInfos_js << <<-BAND2B
        Timeline.createBandInfo( { timeZone:       2,
                                   eventSource:    eventSource[0],
                                   intervalUnit:   Timeline.DateTime.DAY,
                                   intervalPixels: 50,
                                   align:         'Top',
                                   theme:         theme } )
        BAND2B
      group_name = _("general")
      bandNames_js << (_("Available in entitlement-group '") + group_name + "' :")
    else
      bandInfos_js << <<-BAND2B
        Timeline.createBandInfo( { timeZone:       2,
                                   eventSource:    eventSource["#{group_id}"],
                                   intervalUnit:   Timeline.DateTime.DAY,
                                   intervalPixels: 50,
                                   align:         'Top',
                                   theme:         theme } )
        BAND2B
      group_name = inventory_pool.entitlement_groups.find(group_id).to_s
      bandNames_js << (_("Available in entitlement-group '") + group_name + "' :")
    end
  end

  # iterate through model reservations and prepare necessary parameters to construct events inside with Timeline
  def reservations_to_events(av)
    events = {}
    av.running_reservations.each do |line|
      line.reload # NOTE this is quick fix because we have a running_reservation
      user = line.user
      group_id = line.allocated_group_id || 0 # fallback as 0 when general group (nil)

      # if line is late then it won't be available until the item is returned
      end_date = line.late? ? Availability::ETERNITY : (line.end_date.tomorrow.to_time - 1.second)

      # if line is reserved in the future and assigned an item, then the item will be reserved until then and not available from now on
      start_date = line.reserved? ? Date.today : line.start_date

      events[group_id] ||= []
      events[group_id] << {:start         => start_date.to_time.to_formatted_s(:rfc822),
                           :end           => end_date.to_time.to_formatted_s(:rfc822),
                           :durationEvent => true,
                           :title         => "#{user} (#{line.item.try(:inventory_code) || _("Quantity: %d") % line.quantity})",
                           :description   => begin
                              # construct the popup that is being displayed when you click on an event
                              link_string, link_path =
                                if line.status == :submitted
                                  [ _("Acknowledge"), manage_edit_order_path(current_inventory_pool, line.order) ]
                                elsif line.status == :approved
                                  [ _("Hand Over"), manage_hand_over_path(current_inventory_pool, user) ]
                                else
                                  [ _("Take Back"), manage_take_back_path(current_inventory_pool, user) ]
                                end

                              document_link = unless lending_manager?
                                                ""
                                              else
                                                content_tag :div, :class => "buttons", :style => "margin: 1.5em;" do
                                                  link_to link_string, link_path, :target => '_top'
                                                end
                                              end
                              comment = ""
                              comment += ("<b>" + _("Item is overdue and therefore unavailable!") + "</b>") if line.late?
                              comment += ("<b>" + _("Item is reserved in the future, therefore it's not available!") + "</b>") if line.reserved?

                              ("#{_("Phone")}: #{user.phone}<br/>" +
                              "#{_("Reservation")}: #{line.start_date} " + _("until") + " #{line.end_date}<br/>" +
                              comment + '<br/>' +
                              document_link)
                           end,
                           :classname     =>  if not line.item_id
                                                if line.available?
                                                  'no-assigned-item'
                                                else
                                                  'unavailable'
                                                end
                                              elsif line.returned_date
                                                'is-returned'
                                              elsif line.late?
                                                'is-late'
                                              elsif line.reserved?
                                                'is-reserved'
                                              else
                                                'without-conflict'
                                              end,
                           :textColor     => 'black' }
    end
    events
  end

  av = @model.availability_in(current_inventory_pool)

  # events represent the horizontal bars in Timeline that display how long an item is lent out
  events = reservations_to_events(av)

  # TODO dynamic timeZone, get rid of GMT in the bubble
  sum_w = 35

  # bands represent the horizontal bands inside Timeline. The first band is the scrollable "top" "month" band, the next one is the "General Group"
  # band and then follow other groups that exist within an inventory pool bandNames contains the names of the bands starting with the "month" band
  bandNames_js = [""]

  # bandInfos contains JS initialisation code for Timeline bands
  #bandInfos_js = ["Timeline.createBandInfo({ eventSource: eventSource[-1], overview: true, width: '#{sum_w}px', intervalUnit: Timeline.DateTime.MONTH, intervalPixels: 100, align: 'Top' })"]
  bandInfos_js = [ <<-BAND1
    Timeline.createBandInfo( { timeZone:       2,
                               overview:       true,
                               intervalUnit:   Timeline.DateTime.MONTH,
                               intervalPixels: 100,
                               align:          'Top',
                               theme:          theme })
   BAND1
  ]
  # TODO total overview # bandInfos_js << "Timeline.createBandInfo({ timeZone: 2, overview: true, width: '#{sum_w}px', intervalUnit: Timeline.DateTime.DAY, intervalPixels: 32, align: 'Top', theme: theme })"

  # decorators are specially marked days inside a bar, which in leihs will display the available items
  # inside a group on a certain day. We only display available numbers of items on days where the numbers change
  decorators_js = [""]

  # We color days according to whether the total in a particular group is above zero or no.
  # In addition to each group we also do this for the overall total of available items in stock of a certain model.
  # We use the "special" group id -1 for the total. The to_i comparison is needed to convert nil to 0 :
  entitlement_group_ids = \
    av
    .entitlements
    .keys
    .compact
    .map { |g_id| EntitlementGroup.find_by_id(g_id) }
    .sort { |g1, g2| g1.name <=> g2.name }
    .map(&:id)

  group_ids = (["-1"] + entitlement_group_ids + [nil])
  group_ids.each do |g|
    add_timeband(current_inventory_pool, bandNames_js, bandInfos_js, g)

    decorators_js << av.changes.map do |start_date, change|
      end_date = [av.changes.end_date_of(start_date), start_date + 1.month].min
      d = []
      in_quantity = if g == "-1" # showing total
        change.values.sum{|x| x[:in_quantity]}
      else
        Integer(change[g].try(:fetch, :in_quantity).presence || 0)
      end
      if in_quantity < 0
        d << <<-BAND3
             new Timeline.SpanHighlightDecorator(
                   { startDate: '#{start_date.to_time.to_formatted_s(:rfc822)}',
                     endDate:   '#{end_date.tomorrow.to_time.to_formatted_s(:rfc822)}',
                     color:     '#f00',
                     opacity:   50 } )
             BAND3
      end

      d << <<-BAND4
           new Timeline.SpanHighlightDecorator(
                 { startDate: '#{(start_date.to_time).to_formatted_s(:rfc822)}',
                   endDate:   '#{(start_date.to_time).to_formatted_s(:rfc822)}',
                   color:     '#000000',
                   opacity:   50,
                   endLabel:  '#{in_quantity}' } )
           BAND4

      (start_date.tomorrow..end_date).each do |date|
        d << <<-BAND4
             new Timeline.SpanHighlightDecorator(
                   { startDate: '#{(date.to_time).to_formatted_s(:rfc822)}',
                     endDate:   '#{(date.to_time).to_formatted_s(:rfc822)}',
                     color:     '#999999',
                     opacity:   50,
                     endLabel:  '#{in_quantity}' } )
             BAND4
      end

      (d.empty? ? nil : d.join(', '))
    end.compact
  end

:javascript
  //tmp// var SimileAjax_urlPrefix = "/assets/simile_timeline/timeline_ajax/";
  var Timeline_ajax_url = "/simile_timeline/timeline_ajax/simile-ajax-api.js"
  var Timeline_urlPrefix = "/simile_timeline/timeline_js/";
  var Timeline_parameters = "bundle=true&forceLocale=#{current_user.language.locale.split('-').first}";

=#tmp# javascript_include_tag "simile_timeline/timeline_ajax/simile-ajax-api.js"
= javascript_include_tag "/simile_timeline/timeline_js/timeline-api.js"

-# TODO automatic autowidth
:javascript
  $(document).ready(function() {
    SimileAjax.History.enabled = false;
    //window.jQuery = SimileAjax.jQuery;
    var eventSource = [];
    var events = #{events.to_json};
    for( var group_id in events) {
      eventSource[group_id] = new Timeline.DefaultEventSource();
      eventSource[group_id].loadJSON({events: events[group_id]}, document.location.href);
    }

    var theme = Timeline.ClassicTheme.create();
    theme.firstDayOfWeek = 1;
    theme.autoWidth = true;
    theme.event.track.autoWidthMargin = 1.0;
    theme.event.track.offset = 60;
    theme.event.track.gap = -13;
    theme.event.overviewTrack.offset = Number(#{sum_w});
    theme.event.tape.height = 15;

    var bandNames = #{bandNames_js.to_json};

    var bandInfos = [
        #{bandInfos_js.join(',')}
    ];

    bandInfos[0].highlight = true;

    for (var i = 0; i < bandInfos.length; i++) {
      if(bandInfos.length > 1 && i != 1) bandInfos[i].syncWith = 1;
      bandInfos[i].decorators = [
          new Timeline.SpanHighlightDecorator({
              startDate:  "#{(Date.today.to_time).to_formatted_s(:rfc822)}",
              endDate:    "#{(Date.tomorrow.to_time).to_formatted_s(:rfc822)}",
              color:      "#1f71d7",
              opacity:    50,
              startLabel: bandNames[i]
          })
      ];
    }

    #{dec = ""
      decorators_js.each_with_index do |d,i|
        next if d.blank?
        dec << "bandInfos[#{i}].decorators = bandInfos[#{i}].decorators.concat([#{d.join(', ')}]); "
      end
      dec}

    var tl = Timeline.create(document.getElementById("my_timeline"), bandInfos);
    tl.getBand(1).setMinVisibleDate(Timeline.DateTime.parseGregorianDateTime("#{Date.today - 1.week}"));
    tl.layout();

    // rescale dialog when timeline is wrapped inside a dialog
    if($(window.parent.document).find(".dialog").length) {
      $(window.parent.document).find(".dialog iframe").height($("#my_timeline").parent().outerHeight()+20);
      window.parent.Dialog.rescale($(window.parent.document).find(".dialog"));
    }
  });


= stylesheet_link_tag 'timeline'

%div
  #my_timeline{:style => "height: #{sum_w}px; border: 1px solid #aaa"}

  %table.timeline-legend
    %tr
      %td.title
        = _("Legend") + ":"
      %td.kinds
        .tape-without-conflict
          = _("without conflict")
        .tape-is-reserved
          = _("reserved / item assigned in future")
        .tape-no-assigned-item
          = _("no item assigned")
        .tape-unavailable
          = _("unavailable / can't be guaranteed") # FIXME: Why does gettext not work here?
        .tape-is-late
          = _("overdue") + " / " + _("is late")
