:ruby
  def list_variables(v)
    haml_tag :ul, {style: "list-style-type: square; margin-left: 2em;"} do
      v.each do |x|
        if x.is_a? Hash
          x.each_pair do |k1,v1|
            haml_tag :li do
              haml_tag :div, k1
              list_variables v1
            end
          end
        else
          haml_tag :li, x
        end
      end
    end
  end

- content_for :title, _("Editing mail templates for the inventory pool %s") % @current_inventory_pool
- content_for :manage_section, "active"

.wrapper.margin-top-m

  = render :partial => 'manage/tabs/manage', :locals => {:active_tab => :mail_templates}

  .row.content-wrapper.min-height-xl.min-width-full.straight-top

    = form_tag nil, :method => :put, :html => { class: "indent", name: "form" } do

      .row.margin-top-l.padding-horizontal-m
        .row
          %h1.headline-l.float-left= yield :title
          %div.float-right
            %button.button.green{:type => :submit}= _("Save %s") % _("Mail Templates")

        - @mail_templates.each do |mail_template|
          .row.margin-vertical-s{style: mail_template.errors.empty? ? nil : "background-color: #FFB0B0;" }
            .padding-bottom-xxs
              .row.emboss.padding-inset-s
                .col1of5
                  %strong.font-size-m= _("Name")
                .col4of5
                  %input.width-full{type: :hidden, name: "mail_templates[][name]", value: mail_template.name}
                  .font-size-m= mail_template.name.gsub('_', ' ')
              .row.emboss.padding-inset-s
                .col1of5
                  %strong.font-size-m= _("Language")
                .col4of5
                  %input.width-full{type: :hidden, name: "mail_templates[][language]", value: mail_template.language.locale}
                  .font-size-m= "%s (%s)" % [mail_template.language.name, mail_template.language.locale]
              .row.emboss.padding-inset-s
                .col1of5
                  %strong.font-size-m= _("Format")
                .col4of5
                  %input.width-full{type: :hidden, name: "mail_templates[][format]", value: mail_template.format}
                  .font-size-m= mail_template.format
              .row.emboss.padding-inset-s
                .col1of5
                  %strong.font-size-m= _("Body")
                .col4of5
                  %textarea.width-full{name: "mail_templates[][body]", rows: 8}= mail_template.body
              .row.emboss.padding-inset-s
                .col1of5
                .col4of5
                  %details
                    %summary
                      %strong= _("List of available variables")
                    %p
                      -# -# Define a list of allowed types
                      -# - allowed_types = ['type1', 'type2', 'type3'] # Replace with actual types
                      -# -# - type = params[:type] || 'default_type'
                      -# - type = params[:type]
                      -# - type = 'default_type' unless allowed_types.include?(type)
                      -# - method_name = "available_liquid_variables_for_#{type}"
                      -#
                      -# -# Ensure the method exists on MailTemplate and is allowed to be called
                      -# - if MailTemplate.respond_to?(method_name)
                      -#   = capture_haml {list_variables MailTemplate.send(method_name)}
                      -# - else
                      -#   %p= _("No variables available for this type.")

                      - allowed_types = ['type1', 'type2', 'type3'] # replace with actual types
                      - type = params[:type] || 'default_type'
                      - type = 'default_type' unless allowed_types.include?(type)

                      = capture_haml {list_variables MailTemplate.send("available_liquid_variables_for_#{type}")}



:scss
  .toggle_container {
    .toggle_title {
      cursor: pointer;
    }
    .toggle_body {
      display: none;
    }
  }

:coffeescript
  $(document).ready ->
    $("textarea").on('focus', ->
      $("textarea").trigger('autosize.destroy')
      $(this).autosize()
    #).on('blur', ->
    #  $(this).trigger('autosize.destroy')
    )

    $(".toggle_title").click ->
      $(this).siblings(".toggle_body").toggle()
